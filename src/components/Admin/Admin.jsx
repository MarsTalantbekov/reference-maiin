import React, { useState, useEffect } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { RiArrowGoBackFill } from "react-icons/ri";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { color } from "chart.js/helpers";
import "./Admin.css";

const Admin = () => {
  const [valueName, setValueName] = useState("");
  const [valuePin, setValuePin] = useState("");
  const [valuePassword, setValuePassword] = useState("");
  const [editId, setEditId] = useState(null);
  const [userss, setUserss] = useState([]);
  const dispatch = useDispatch();
  const nav = useNavigate();

  // üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const res = await fetch("http://localhost:3004/users");
        const data = await res.json();
        console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", data); // üîç –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        setUserss(data); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
      }
    };
  
    fetchUsers();
  }, []);
  

  

  const error = () => {
    toast.error("–¢–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", {
      position: "top-right",
      autoClose: 5000,
    });
  };

  const warning = () => {
    toast.warning("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏!", {
      position: "top-right",
      autoClose: 5000,
    });
  };

  const success = () => {
    toast.success("–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", {
      position: "top-right",
      autoClose: 5000,
    });
  };


  // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const addUserss = async () => {
    if (valueName.trim() === "" || valuePin.trim() === "" || valuePassword.trim() === "") {
      warning();
      return;
    }
  
    if (editId) {
      // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        const res = await fetch(`http://localhost:3004/users/${editId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            name: valueName.trim(),
            pin: valuePin.trim(),
            password: valuePassword.trim(),
          }),
        });
  
        if (res.ok) {
          setUserss(
            userss.map((user) =>
              user.id === editId
                ? { ...user, name: valueName, pin: valuePin, password: valuePassword }
                : user
            )
          );
          setEditId(null);
          setValueName("");
          setValuePin("");
          setValuePassword("");
          success();
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      }
    } else {
      // üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const uniqueEmail = `user_${Date.now()}@example.com`;
      const newUser = {
        name: valueName.trim(),
        pin: valuePin.trim(),
        password: valuePassword.trim(),
        email: uniqueEmail,
      };
  
      try {
        const res = await fetch("http://localhost:3004/users", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(newUser),
        });
  
        if (res.ok) {
          const createdUser = await res.json();
          setUserss([...userss, createdUser]);
          setValueName("");
          setValuePin("");
          setValuePassword("");
          success();
        } else {
          error();
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      }
    }
  };
  
  
  
  
  

  // üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  const del = async (user) => {
    try {
      const res = await fetch(`http://localhost:3004/users/${user.id}`, {
        method: "DELETE",
      });
  
      if (res.ok) {
        setUserss(userss.filter((u) => u.id !== user.id)); // –£–¥–∞–ª—è–µ–º –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    }
  };

  const edit = (item, event) => {
    event.preventDefault(); // üîπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setValueName(item.name);
    setValuePin(item.pin);
    setValuePassword(item.password);
    setEditId(item.id);
  };
  
  
  
  

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      addUserss();
    }
  };

  return (
    <section id="admin">
      <div className="container">
        <div className="user-back">
          <button onClick={() => nav("/")} style={{ cursor: "pointer" }}>
            <RiArrowGoBackFill />
          </button>
        </div>
        <h1>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>
        <div className="admin">
          <input
            type="text"
            onChange={(e) => setValueName(e.target.value)}
            placeholder="–ò–º—è –§–∞–º–∏–ª–∏—è"
            value={valueName}
            onKeyDown={handleKeyDown}
          />
          <input
            type="text"
            onChange={(e) => setValuePin(e.target.value)}
            placeholder="–ò–ù–ù"
            value={valuePin}
            onKeyDown={handleKeyDown}
            disabled={editId !== null}
          />
          <input
            type="text"
            onChange={(e) => setValuePassword(e.target.value)}
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={valuePassword}
            onKeyDown={handleKeyDown}
          />
          <button
            className="btn-add-change"
            style={{ background: editId ? "red" : "green" }}
            onClick={addUserss}
          >
            {editId ? "–û–±–Ω–æ–≤–∏—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å"}
          </button>
        </div>

          <div className="data-list">
          <form action="" className="admin-list__form">
              <div className="admin-list__labels">
                <label htmlFor="">–§–ò–û</label>
                <label htmlFor="">–ò–ù–ù</label>
                <label htmlFor="">–ü–∞—Ä–æ–ª—å</label>
                <label htmlFor="">Action</label>
                <label htmlFor="">–£–¥–∞–ª–∏—Ç—å</label>
               
              </div>
              <div className="admin-list__labelsSecond">
              {userss.length > 0 ? (
                userss.map((user) => (
                  
                  <p key={user.id}>
                    <span>{user.name} </span>
                    <span>{user.pin}</span>
                    <span>{user.password}</span>  
                    <span>
                      <button 
                        className="btn-data__admin" 
                        onClick={(event) => edit(user, event)}
                        >
                          –ò–∑–º–µ–Ω–∏—Ç—å
                      </button>
                    </span>
                    <span>
                      <button 
                        className="btn-data__admin delete-btn"
                        onClick={() => del(user)}
                        >
                          –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </span>
                  </p>
                  
                ))
                
              ) : (
                <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              )}
              </div>
            </form>
          </div>

        <ToastContainer />
      </div>
    </section>
  );
};

export default Admin;



// {userss.length > 0 ? (
//   userss.map((user) => (
//     <p key={user.id}>
//       {user.name} - {user.pin} - {user.password}
//     </p>
//   ))
// ) : (
//   <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
// )}